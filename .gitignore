# Node.js
node_modules/
npm-debug.log
 # Compiled files
*.js
*.js.map
*.mjs
*.cjs
*.tsbuildinfo
 # Dependency directories
jspm_packages/
bower_components/

# Node.js
node_modules/
npm-debug.log
 # Compiled files
*.js
*.js.map
*.mjs
*.cjs
*.tsbuildinfo
 # Dependency directories
jspm_packages/
bower_components/
 # TypeScript-specific
*.tsbuildinfo
*.ts~

# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a
*.so
 # Folders
_obj
_test
 # Architecture specific extensions/prefixes
*.[568vq]
[568vq].out
 # Temp files
*.exe
*.test
*.prof
*.exe~
*.stackdump
*.test~
*.tmp
*.log
*.swp

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
 # C extensions
*.so
 # Distribution / packaging
dist/
build/
eggs/
*.egg-info/
*.egg
 # PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec
 # Installer logs
pip-log.txt
pip-delete-this-directory.txt
 # Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
 # Translations
*.mo
*.pot
 # Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
 # Flask stuff:
instance/
.webassets-cache
 # Scrapy stuff:
.scrapy
 # Sphinx documentation
docs/_build/
 # PyBuilder
target/
 # Jupyter Notebook
.ipynb_checkpoints
 # IPython
profile_default/
ipython_config.py
 # pyenv
.python-version
 # pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock
 # PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/
 # Celery stuff
celerybeat-schedule
celerybeat.pid
 # SageMath parsed files
*.sage.py
 # Spyder project settings
.spyderproject
.spyproject
 # Rope project settings
.ropeproject
 # Mr Developer
.mr.developer.cfg
.project
.pydevproject
 # mkdocs documentation
/site
 # mypy
.mypy_cache/
.dmypy.json
dmypy.json
 # Pyre type checker
.pyre/
 # pytype static type analyzer
.pytype/
 # Cython debug symbols
cython_debug/
 # Rust Cargo
target/
Cargo.lock
 # Generated files
*.rs.bk



# Compiled class file
*.class
 # Log file
*.log
 # BlueJ files
*.ctxt
 # Mobile Tools for Java (J2ME)
.mtj.tmp/
 # Package Files #
*.jar
*.war
*.ear
 # Maven #
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
 # Gradle #
bin/
build/
.gradle
build.gradle
gradle.properties
gradlew
gradlew.bat
settings.gradle
.gradle/
.idea/
*.iml
 # Eclipse #
.project
.classpath
.settings/
.metadata/
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.externalToolBuilders/
*.launch
 # NetBeans #
nbproject/private/
build/
nbbuild/
dist/
nbdist/
nbactions.xml
nb-configuration.xml
*.nbm
*.nbc
*.jar
 # VS Code #
.vscode/


# Generated by Cargo
Cargo.lock
 # Remove Cargo.lock from gitignore if creating an executable, leave it if creating a library
# src/target/
 # Build output
target/
 # Rust toolchain
.rustup/
 # Dependency directories
# These directories contain the source code of dependencies installed by Cargo
# They should be ignored unless you have modified them yourself
vendor/


# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a
*.so
 # Folders
_obj
_test
 # Architecture specific extensions/prefixes
*.[568vq]
[568vq].out
 # Temp files
*.exe
*.test
*.prof
*.exe~
*.stackdump
*.test~
*.tmp
*.log
*.swp
